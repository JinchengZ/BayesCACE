% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cace.meta.ic.R
\name{cace.meta.ic}
\alias{cace.meta.ic}
\title{Bayesian hierarchical models for CACE meta-analysis with incomplete compliance information}
\usage{
cace.meta.ic(
  data,
  param = c("CACE", "u1out", "v1out", "s1out", "b1out", "pic", "pin", "pia"),
  prior.type = "default",
  delta.n = TRUE,
  delta.a = TRUE,
  delta.u = TRUE,
  delta.v = TRUE,
  delta.s = TRUE,
  delta.b = TRUE,
  cor = TRUE,
  digits = 3,
  n.adapt = 1000,
  n.iter = 1e+05,
  n.burnin = floor(n.iter/2),
  n.chains = 3,
  n.thin = max(1, floor((n.iter - n.burnin)/1e+05)),
  conv.diag = FALSE,
  mcmc.samples = FALSE,
  study.specific = FALSE
)
}
\arguments{
\item{data}{a input dataset the same structure as the example data `epidural_ic`, 
containing multiple rows referring to multiple studies in a meta-analysis.}

\item{param}{a character string vector indicating the parameters to be tracked and estimated. 
By default the following parameters (see \code{details}) are included: \eqn{\theta^{CACE}} 
(\code{CACE}), \eqn{E(u_{i1})} (\code{u1out}), \eqn{E(v_{i1})} (\code{v1out}), \eqn{E(s_{i1})} (\code{s1out}), 
\eqn{E(b_{i1})} (\code{b1out}), \eqn{\pi_a} (\code{pia}), \eqn{\pi_n} (\code{pin}), and 
\eqn{\pi_c=1-\pi_a-\pi_n} (\code{pic}). 
Users can modify the string vector to only include parameters of interest besides \eqn{\theta^{CACE}}.}

\item{prior.type}{the default priors are used by the default assignment `prior.type="default"`.
Like the function \code{\link{cace.study}}, weakly informative priors \eqn{\alpha_n, \alpha_a \sim 
N(0, 2.5^2)} and \eqn{\alpha_s, \alpha_b, \alpha_u, \alpha_v \sim N(0, 2^2)} are assigned to the 
means of these transformed parameters:
\eqn{\pi_{in}=\frac{\exp(n_i)}{1+\exp(n_i)+\exp(a_i)}}, \eqn{\pi_{ia}=\frac{\exp(a_i)}{1+\exp(n_i)+\exp(a_i)}}, 
where \eqn{n_i=\alpha_n+\delta_{in}}, \eqn{a_i=\alpha_a+\delta_{ia}}, \eqn{logit(s_{i1})=\alpha_s + \delta_{is}},
\eqn{logit(b_{i1})=\alpha_b + \delta_{ib}}, \eqn{probit(u_{i1})=\alpha_u + \delta_{iu}}, 
and \eqn{probit(v_{i1})=\alpha_v + \delta_{iv}}. 
The default prior of random effects are illstrated in `Details`.
Alternatively, this function allows users to specify their own prior distributions by saving a separate 
`R` file \code{prior.meta.R} under the same directory with the model file, and assigning the argument 
`prior.type = "custom"`. See example in `Details`. 
Users can modify the above customized file \code{prior.meta.R} to assign their preferred prior 
distributions. Note that same as the function \code{\link{cace.study}}, the function cannot
combine the default priors with partial user-defined prior distributions. Thus users need to 
be careful when choosing the customized priors: the pre-defined `R` file \code{prior.meta.R} must 
include distributions for all hyper-parameters.}

\item{delta.n}{logical values indicating whether the 
corresponding random effect is included in the model. The default model sets all of these arguments 
to `TRUE`. Note that \eqn{\rho} (\code{cor}) can only be included when both \eqn{\delta_{in}} 
(\code{delta.n}) and \eqn{\delta_{ia}} (\code{delta.a}) are set to `TRUE`. Otherwise, a warning 
occurs and the model continues running by forcing `delta.n = TRUE` and `delta.a = TRUE`.}

\item{delta.a}{logical values indicating whether the 
corresponding random effect is included in the model. The default model sets all of these arguments 
to `TRUE`. Note that \eqn{\rho} (\code{cor}) can only be included when both \eqn{\delta_{in}} 
(\code{delta.n}) and \eqn{\delta_{ia}} (\code{delta.a}) are set to `TRUE`. Otherwise, a warning 
occurs and the model continues running by forcing `delta.n = TRUE` and `delta.a = TRUE`.}

\item{delta.u}{logical values indicating whether the 
corresponding random effect is included in the model. The default model sets all of these arguments 
to `TRUE`. Note that \eqn{\rho} (\code{cor}) can only be included when both \eqn{\delta_{in}} 
(\code{delta.n}) and \eqn{\delta_{ia}} (\code{delta.a}) are set to `TRUE`. Otherwise, a warning 
occurs and the model continues running by forcing `delta.n = TRUE` and `delta.a = TRUE`.}

\item{delta.v}{logical values indicating whether the 
corresponding random effect is included in the model. The default model sets all of these arguments 
to `TRUE`. Note that \eqn{\rho} (\code{cor}) can only be included when both \eqn{\delta_{in}} 
(\code{delta.n}) and \eqn{\delta_{ia}} (\code{delta.a}) are set to `TRUE`. Otherwise, a warning 
occurs and the model continues running by forcing `delta.n = TRUE` and `delta.a = TRUE`.}

\item{delta.s}{logical values indicating whether the 
corresponding random effect is included in the model. The default model sets all of these arguments 
to `TRUE`. Note that \eqn{\rho} (\code{cor}) can only be included when both \eqn{\delta_{in}} 
(\code{delta.n}) and \eqn{\delta_{ia}} (\code{delta.a}) are set to `TRUE`. Otherwise, a warning 
occurs and the model continues running by forcing `delta.n = TRUE` and `delta.a = TRUE`.}

\item{delta.b}{logical values indicating whether the 
corresponding random effect is included in the model. The default model sets all of these arguments 
to `TRUE`. Note that \eqn{\rho} (\code{cor}) can only be included when both \eqn{\delta_{in}} 
(\code{delta.n}) and \eqn{\delta_{ia}} (\code{delta.a}) are set to `TRUE`. Otherwise, a warning 
occurs and the model continues running by forcing `delta.n = TRUE` and `delta.a = TRUE`.}

\item{cor}{logical values indicating whether the 
corresponding random effect is included in the model. The default model sets all of these arguments 
to `TRUE`. Note that \eqn{\rho} (\code{cor}) can only be included when both \eqn{\delta_{in}} 
(\code{delta.n}) and \eqn{\delta_{ia}} (\code{delta.a}) are set to `TRUE`. Otherwise, a warning 
occurs and the model continues running by forcing `delta.n = TRUE` and `delta.a = TRUE`.}

\item{digits}{a positive integer specifying the digits after the decimal point for 
the effect size estimates. The default is \code{3}.}

\item{n.adapt}{the number of iterations for adaptation in Markov chain Monte Carlo (MCMC) algorithm; 
it is used to maximize the sampling efficiency. 
The default is 1,000. If a warning "adaptation incomplete" appears, users may increase 
\code{n.adapt}. This argument and the following \code{n.iter}, \code{n.burnin}, \code{n.chains},
\code{n.thin} are passed to the functions in R package \code{rjags}.}

\item{n.iter}{the number of iterations of each MCMC chain. 
The default is \code{100,000}.}

\item{n.burnin}{the number of iterations for burn-in period. The default is 
the largest integer not greater than \code{n.iter/2}.}

\item{n.chains}{the number of MCMC chains. The default is \code{3}.}

\item{n.thin}{a positive integer indicating thinning rate for MCMC chains, which is used to 
avoid potential high auto-correlation and to save computer memory when \code{n.iter} is 
large. The default is set as \code{1} or the largest integer not greater than 
\code{((n.iter - n.burnin)/1e+05)}, whichever is larger.}

\item{conv.diag}{a logical value indicating whether to compute the Gelman and Rubin 
convergence statistic (\eqn{\hat{R}}) of each parameter as a convergence diagnostic.
It is considered the chains are well mixed and have converged to the target distribution 
if \eqn{\hat{R} \le 1.1}. The default is `FALSE`. If `TRUE`, \code{n.chains} must be greater than 1, 
and the function saves each chain's MCMC samples for all parameters, which can be used 
to produce trace, posterior density, and auto-correlation plots by calling the function 
\code{plot.cacebayes}.}

\item{mcmc.samples}{a logical value indicating whether to save MCMC posterior samples
in the output object. The default is `FALSE`. If `TRUE`, the output object list 
includes each chain's MCMC samples for all parameters. They can be used in the function 
\code{plot.cacebayes} to generate the trace, posterior density, and auto-correlation plots 
for further model diagnostics.}

\item{study.specific}{a logical value indicating whether to calculate the study-specific 
\eqn{\theta^{CACE}_i}. If `TRUE`, the model will first check the logical status of arguments 
\code{delta.u} and \code{delta.v}. If both are `FALSE`, meaning that neither response rate \eqn{u_{i1}} 
or \eqn{v_{i1}} is modeled with a random effect, then the study-specific \eqn{\theta^{CACE}_i} is 
the same across studies. The function gives a warning and continues by making `study.specific = FALSE`. 
Otherwise, the study-specific \eqn{\theta^{CACE}_i} are estimated and saved as the parameter \code{cacei}.}
}
\description{
This function also estimates \eqn{\theta^\text{CACE}}using the Bayesian hierarchcal model 
but can accommodate studies with incomplete compliance data.  
The necessary data structure and the likelihood function are presented Section 2.3, 
CACE for meta-analysis with incomplete compliance information.
}
\details{
Note that when compiling the \code{JAGS} model, the warning `adaptation incomplete` may 
occasionally occur, indicating that the number of iterations for the adaptation process 
is not sufficient. The default value of \code{n.adapt} (the number of iterations for adaptation) 
is 1,000. This is an initial sampling phase during which the samplers adapt their behavior 
to maximize their efficiency (e.g., a Metropolis--Hastings random walk algorithm may change 
its step size). The `adaptation incomplete` warning indicates the MCMC algorithm may not 
achieve maximum efficiency, but it generally has little impact on the posterior estimates 
of the treatment effects. To avoid this warning, users may increase \code{n.adapt}.
}
\examples{
\dontrun{
data("epidural_ic", package = "BayesCACE")
set.seed(123)
out.meta.ic <- cace.meta.ic(data = epidural_ic, conv.diag = TRUE, 
mcmc.samples = TRUE, study.specific = TRUE)
}
}
\references{
{
\insertRef{zhou2019bayesian}{BayesCACE}
\insertRef{zhou2020software}{BayesCACE}
}
}
\seealso{
\code{\link[BayesCACE]{cace.study}}, \code{\link[BayesCACE]{cace.meta.c}}
}
